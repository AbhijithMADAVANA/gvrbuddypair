# Generated by Django 5.0.8 on 2024-09-20 11:13

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country_codes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calling_code', models.CharField(max_length=10, unique=True)),
                ('country_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['calling_code'],
            },
        ),
        migrations.CreateModel(
            name='Disabilities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disability_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Hobbies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hobby', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Interests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interest', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='languages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LifestyleChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('address_details', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Qualifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PartnerPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_min', models.IntegerField(default=18)),
                ('age_max', models.IntegerField(default=35)),
                ('preferred_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10)),
                ('height_min', models.IntegerField(default=100)),
                ('height_max', models.IntegerField(default=220)),
                ('weight_min', models.IntegerField(default=40)),
                ('weight_max', models.IntegerField(default=150)),
                ('religion', models.CharField(choices=[('CH', 'Christianity'), ('IS', 'Islam'), ('HI', 'Hinduism'), ('BU', 'Buddhism'), ('JE', 'Judaism'), ('SI', 'Sikhism'), ('OT', 'Other')], max_length=2)),
                ('occupation', models.CharField(max_length=255)),
                ('hobbies', models.ManyToManyField(to='U_auth.hobbies')),
                ('interests', models.ManyToManyField(to='U_auth.interests')),
                ('lifestyle_choices', models.ManyToManyField(to='U_auth.lifestylechoice')),
                ('education_level', models.ManyToManyField(to='U_auth.qualifications')),
            ],
        ),
        migrations.CreateModel(
            name='Preferred_location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=100, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='U_auth.partnerpreference')),
            ],
        ),
        migrations.CreateModel(
            name='UserPersonalDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10)),
                ('dob', models.DateField()),
                ('smoking_habits', models.BooleanField(default=False, verbose_name='Smoking Habits')),
                ('drinking_habits', models.BooleanField(default=False, verbose_name='Drinking Habits')),
                ('profile_pic', models.ImageField(default='images/default_pic.png', upload_to='images/')),
                ('short_video', models.FileField(blank=True, null=True, upload_to='videos/')),
                ('is_employer', models.BooleanField(default=False)),
                ('is_employee', models.BooleanField(default=False)),
                ('is_jobseeker', models.BooleanField(default=False)),
                ('bio', models.CharField(blank=True, default='This user hasnâ€™t added a bio yet. Stay tuned for more!', max_length=100)),
                ('hobbies', models.ManyToManyField(to='U_auth.hobbies')),
                ('interests', models.ManyToManyField(to='U_auth.interests')),
                ('qualifications', models.ManyToManyField(to='U_auth.qualifications')),
                ('user_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='U_auth.location')),
            ],
            options={
                'verbose_name': 'User Personal Detail',
                'verbose_name_plural': 'User Personal Details',
            },
        ),
        migrations.CreateModel(
            name='Pictures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photos', models.ImageField(blank=True, upload_to='images/')),
                ('add_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='U_auth.userpersonaldetails', verbose_name='reverse_user_pic')),
            ],
        ),
        migrations.CreateModel(
            name='costume_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('phone', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be 10 digits only.', regex='^\\d{10}$')])),
                ('is_online', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('country_details', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reverse_User_country', to='U_auth.country_codes')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_language', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reverse_User_lang', to='U_auth.languages')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='userpersonaldetails',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_details', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserExtraDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('continent', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('country_code', models.CharField(blank=True, max_length=10, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('region_name', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('timezone', models.CharField(blank=True, max_length=100, null=True)),
                ('currency', models.CharField(blank=True, max_length=10, null=True)),
                ('isp', models.CharField(blank=True, max_length=255, null=True)),
                ('org', models.CharField(blank=True, max_length=255, null=True)),
                ('as_name', models.CharField(blank=True, max_length=255, null=True)),
                ('mobile', models.BooleanField(default=False)),
                ('proxy', models.BooleanField(default=False)),
                ('hosting', models.BooleanField(default=False)),
                ('query_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Relationship_Goals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_short', models.BooleanField(default=False)),
                ('is_long', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='partnerpreference',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='partner_preference', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='OTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_validated', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Job_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=100)),
                ('job_title', models.CharField(max_length=100)),
                ('designation', models.CharField(max_length=50)),
                ('experiences_level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level')], max_length=50)),
                ('job_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='U_auth.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('married_status', models.CharField(choices=[('single', 'Single'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=50)),
                ('annual_income', models.FloatField()),
                ('family_type', models.CharField(choices=[('joint', 'Joint'), ('nuclear', 'Nuclear'), ('extended', 'Extended')], max_length=50)),
                ('family_name', models.CharField(max_length=50)),
                ('father_name', models.CharField(max_length=50)),
                ('father_occupation', models.CharField(max_length=50)),
                ('mother_name', models.CharField(max_length=50)),
                ('mother_occupation', models.CharField(max_length=50)),
                ('total_siblings', models.IntegerField()),
                ('total_siblings_married', models.IntegerField()),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('blood_group', models.CharField(max_length=50)),
                ('religion', models.CharField(choices=[('CH', 'Christianity'), ('IS', 'Islam'), ('HI', 'Hinduism'), ('BU', 'Buddhism'), ('JE', 'Judaism'), ('SI', 'Sikhism'), ('OT', 'Other')], max_length=50)),
                ('caste_or_community', models.CharField(max_length=50)),
                ('complexion', models.CharField(max_length=50, null=True)),
                ('user_disabilities', models.ManyToManyField(to='U_auth.disabilities', verbose_name='disabilities')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Additional Detail',
                'verbose_name_plural': 'Additional Details',
            },
        ),
    ]
